{"name":"Super-Reads","tagline":"A clone of goodreads.com","body":"# BiblioPile\r\n\r\n## In which we clone GoodReads.com\r\n\r\n## See on the web: [http://bibliopile.org](http://bibliopile.org)!\r\n\r\n####Table of Contents\r\n\r\n1. [Introduction](#readers)\r\n2. [Server-side](#server-side)\r\n    - [Authentication](#authentication)\r\n    - [Database Model](#databasemodel)\r\n3. [Client-side](#client-side)\r\n4. [To Do](#todo)\r\n\r\n\r\n## Readers\r\n\r\nThe great American novelist and essayist, Elwyn Brooks ('E. B.') White wrote, in\r\nthe November 30, 1935 issue of _The New Yorker_, a short essay, \"Irtnog,\" about the struggle\r\nbetween readers and writers\r\n\r\n> Along about 1920 it became apparent that more things were being written than\r\n> people had time to read.  That is to say, even if a man spent his entire time\r\n> reading stories, articles, and news, as they appeared in books, magazines, and\r\n> pamphlets, he fell behind.  This was no fault of the reading public; on the\r\n> contrary, readers made a real effort to keep pace with writers, and utilized\r\n> every spare moment during their walking hours.\r\n\r\nObviously, in these days of even further accelerated production, in print and\r\nespecially online, readers need a way to hone in on those books they actually\r\nwant to read.\r\n\r\nEnter websites like [GoodReads](https://www.goodreads.com/), which allow readers\r\nto connect with other readers with similar tastes, and exchange information.\r\n\r\n\r\n## Server-side\r\n\r\nThe backend is a [Rails](http://rubyonrails.org/) 3.2.13 application exposing a\r\n[JSON](http://www.json.org/) API, layered on top of a [PostgreSQL](http://www.postgresql.org/)\r\ndatabase. The API allows for accessing all the major database entities (users,\r\ntexts, etc.) as well as some of the relationships, such as \"friends.\"\r\n\r\nThe only complex aspect of the server-side code is in the SQL for efficiently\r\nassembling the information needed by the client. For instance, to get all the\r\ntexts by a particular author, for a logged-in user (that is, with information\r\nabout the user's interactions with those texts) we need a scope which gets the\r\ninformation in one fell swoop\r\n\r\n\r\n```ruby\r\n# /app/models/text.rb\r\ndef self.find_all_texts_by_author_for_user(author_id, user_id)\r\n  Text.find_by_sql([<<-SQL, user_id, user_id, author_id])\r\n    SELECT\r\n      texts.*,\r\n      text_states.state AS state,\r\n      ratings.rating AS user_rating\r\n    FROM\r\n      texts\r\n    LEFT OUTER JOIN\r\n      text_states ON (texts.id = text_states.text_id AND\r\n        text_states.user_id = ?)\r\n    LEFT OUTER JOIN\r\n      ratings ON (texts.id = ratings.text_id AND\r\n        ratings.user_id = ?)\r\n    INNER JOIN\r\n      text_authors ON (texts.id = text_authors.text_id AND\r\n        text_authors.author_id = ?)\r\n  SQL\r\nend\r\n```\r\n\r\n\r\n\r\n### Authentication\r\n\r\nAuthentication is handled on the server with a hand-rolled solution based on\r\nrandom 16-character strings as session keys. I chose to write my own authentication\r\nsystem in order to have more control over the codebase and to limit the amount\r\ndelegated to third parties. The system as it stands only has a single role, that\r\nof the current user, who is authorized to do any _creation_ of elements. Other\r\nusers can read the data of all elements.\r\n\r\nUsers are identified by _two_ unique attributes, `username` and `email`. They can\r\nuse either to login. Internally `username` is given precedence.\r\n\r\n\r\n### Database model\r\n\r\nThe central persisted entities are:\r\n\r\n* Users\r\n* Texts\r\n* Genres\r\n* Ratings\r\n* Reviews\r\n* Comments\r\n\r\nThe are then related through a series of join-tables. For instance, users can\r\nhave \"friends,\" so there is a table for relating users with other users in a\r\nsingle direction.\r\n\r\nThe schema can be seen [here](https://github.com/imurchie/super-reads/blob/master/db/schema.rb).\r\n\r\n\r\n## Client-side\r\n\r\nIn contrast to the ur-site, this site is largely a single-page application running\r\nthe client-side JavaScript MVC framework [Backbone.js](http://backbonejs.org/), styled with\r\n[Twitter](http://www.twitter.com/)'s [Bootstrap](http://getbootstrap.com/) library.\r\nBootstrap is a good fit since most of the functionality is confined to a few pages\r\nrepresenting different sets of a relatively small collection of data types (see\r\nthe [database model](#databasemodel) for more details). This also has the advantage\r\nof allowing a more responsive experience.\r\n\r\nThere is minimal caching of database entities on the client-side, in the form of\r\navailable books (the \"heaviest\" resource in the system). These get cached but\r\nimmediately updated while being viewed. With a larger load this caching could be\r\nshored up with a more sophisticated system for checking up-to-dateness, in addition\r\nto the possibility of being supplemented with server-side caching with a system\r\nsuch as Redis or Memcached.\r\n\r\n\r\n## To Do\r\n\r\nThe implementation as it stands covers the basic functionality, but other features\r\nwould be nice. Particularly those involved in interacting users. Thus we would like\r\n\r\n    - messaging between users\r\n    - user recommendations (one user to another)\r\n    - notifications of recent activity of other users\r\n    - commenting on things other than books. Comments on authors, genres, reviews, etc.\r\n\r\nAnother level of recommendations would be nice, but would require a significantly\r\nlarger data set and user base, to allow for automated taste-based recommendations.\r\n\r\nComments and reviews are currently just treated as text. The only processing is\r\nto protect from injection attacks. It would be nice to allow for some markup so\r\nusers can format their comments and reviews nicely. We could use a markdown-style\r\nprocessing engine with little difficultly.\r\n\r\nThe last _big_ desideratum is a feature for searching books, authors, and genres.\r\nFinding anything now is based on browsing, which is fine for a small amount of data\r\nbut would be unwieldy with much more.\r\n\r\nOn a different level is integration with other social-media sites. At the moment\r\nthere is the ability to [tweet](http://twitter.com/) about particular pages.\r\nIntegration with other sites, like [Facebook](http://www.facebook.com/), would\r\nbe a lovely feature.\r\n\r\nAs a completely frivolous **bonus-feature** it would be nice to implement a version\r\nof the [_Amazon.com Knee-Jerk Contrarian Game_](http://waxy.org/2004/07/amazoncom_kneej/),\r\nallowing a user to browse particularly delightful low reviews of beloved books.\r\nSomething like the [best-of Craigslist](http://www.craigslist.org/about/best/all/).\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}